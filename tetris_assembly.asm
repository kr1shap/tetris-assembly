#####################################################################
# Bitmap Display Configuration:
# - Unit width in pixels: 16 
# - Unit height in pixels: 16 
# - Display width in pixels: 512 
# - Display height in pixels: 512 
# - Base Address for Display: 0x10008000 ($gp)
# How to play:
# WASD -> typical movements (W = rotate, S = down, A/D = left and right)
# Q -> Quit game, P -> Pause game, R -> Restart Game
#####################################################################
.data
##############################################################################
# Immutable Data
##############################################################################
# The address of the bitmap display. Don't forget to connect it!
ADDR_DSPL:
    .word 0x10008000
# The address of the keyboard. Don't forget to connect it!
ADDR_KBRD:
    .word 0xffff0000
#Colours to use when drawing!
#Checkerboard colours
CHECK_DARK:
    .word 0xDDCEF5
CHECK_LIGHT: 
    .word 0xBFA3F0
#Other colours - background, accents
PURP_BKGND: 
    .word 0x2C123F
ACCENT_LIGHT: 
    .word 0x5A3278
ACCENT_DARK:
    .word 0x4F2C6C
SPRITE_PURPLE:
    .word 0xA770D6
BLACK: 
    .word 0x000000
TET_TCOL: 
    .word 0xa03fe0
TET_LCOL: 
    .word 0x412B78
TET_JCOL: 
    .word 0x75658F
TET_SCOL: 
    .word 0x742EE8
TET_ZCOL: 
    .word 0x8372AD
TET_OCOL: 
    .word 0x6644BB
TET_ICOL: 
    .word 0x9776D6

graphic_colors:
    .word 0x00A770D6, 0x00A770D6, 0x00A770D6, 0x00A770D6, 0x00A770D6
    .word 0x00A770D6, 0x00A770D6, 0x00A770D6, 0x00A770D6, 0x00A770D6, 0x00A770D6, 0x00A770D6, 0x00A770D6, 0x00A770D6
    .word 0x00A770D6, 0x00A770D6, 0x00A770D6, 0x00A770D6, 0x002C123F, 0x002C123F, 0x00A770D6, 0x002C123F, 0x002C123F, 0x00A770D6, 0x00000000
    .word 0x00A770D6, 0x00A770D6, 0x00A770D6, 0x00A770D6, 0x00A770D6, 0x00A770D6, 0x00A770D6, 0x00A770D6, 0x00A770D6, 0x00A770D6, 0x00000000
    .word 0x00A770D6, 0x00A770D6, 0x00A770D6, 0x00A770D6, 0x00A770D6, 0x00A770D6, 0x00A770D6, 0x00A770D6, 0x00000000, 0x00000000
    .word 0x00A770D6, 0x00A770D6, 0x00000000, 0x00000000

graphic_offsets:
    .word 3168, 3172, 3176, 3180, 3184, 3268, 3284
    .word 3292, 3296, 3300, 3304, 3308, 3312, 3316
    .word 3396, 3400, 3404, 3420, 3424, 3428, 3432, 3436, 3440, 3444, 3448
    .word 3524, 3532, 3540, 3548, 3552, 3556, 3560, 3564, 3568, 3572, 3576
    .word 3652, 3660, 3668, 3680, 3684, 3688, 3692, 3696, 3700, 3704
    .word 3812, 3820, 3824, 3828

quit_graphic:
.word 0x4F2C6C, 0x4F2C6C, 0x4F2C6C, 0x4F2C6C, 0x4F2C6C, 0x4F2C6C, 0x4F2C6C, 0x4F2C6C, 0x4F2C6C, 0x4F2C6C, 0x4F2C6C, 0x4F2C6C, 0x4F2C6C, 0x4F2C6C, 0x4F2C6C, 0x4F2C6C, 0x4F2C6C, 0x4F2C6C, 0x4F2C6C, 0x4F2C6C, 0x4F2C6C, 0x4F2C6C, 0x4F2C6C, 0x4F2C6C, 0x4F2C6C, 0x4F2C6C, 0x4F2C6C, 0x4F2C6C, 0x4F2C6C, 0x4F2C6C, 0x4F2C6C, 0x4F2C6C
.word 0x4F2C6C, 0x4F2C6C, 0x4F2C6C, 0x5A3278, 0x4F2C6C, 0x4F2C6C, 0x4F2C6C, 0x4F2C6C, 0x4F2C6C, 0x4F2C6C, 0x4F2C6C, 0x4F2C6C, 0x4F2C6C, 0x4F2C6C, 0x4F2C6C, 0x4F2C6C, 0x4F2C6C, 0x4F2C6C, 0x4F2C6C, 0x4F2C6C, 0x4F2C6C, 0x4F2C6C, 0x4F2C6C, 0x4F2C6C, 0x4F2C6C, 0x4F2C6C, 0x4F2C6C, 0x4F2C6C, 0x5A3278, 0x4F2C6C, 0x4F2C6C, 0x4F2C6C
.word 0x4F2C6C, 0x4F2C6C, 0x4F2C6C, 0x5A3278, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x5A3278, 0x4F2C6C, 0x4F2C6C, 0x4F2C6C
.word 0x4F2C6C, 0x5A3278, 0x5A3278, 0x5A3278, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x5A3278, 0x5A3278, 0x5A3278, 0x4F2C6C
.word 0x4F2C6C, 0x4F2C6C, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x4F2C6C, 0x4F2C6C
.word 0x4F2C6C, 0x4F2C6C, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x4F2C6C, 0x4F2C6C
.word 0x4F2C6C, 0x4F2C6C, 0x2C123F, 0x2C123F, 0x2C123F, 0x4F2C6C, 0x2C123F, 0x4F2C6C, 0x2C123F, 0x4F2C6C, 0x4F2C6C, 0x4F2C6C, 0x2C123F, 0x4F2C6C, 0x2C123F, 0x4F2C6C, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x4F2C6C, 0x4F2C6C, 0x4F2C6C, 0x2C123F, 0x2C123F, 0x4F2C6C, 0x4F2C6C
.word 0x4F2C6C, 0x4F2C6C, 0x2C123F, 0x2C123F, 0x2C123F, 0x4F2C6C, 0x2C123F, 0x4F2C6C, 0x2C123F, 0x4F2C6C, 0x2C123F, 0x4F2C6C, 0x2C123F, 0x4F2C6C, 0x2C123F, 0x4F2C6C, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x4F2C6C, 0x4F2C6C, 0x4F2C6C, 0x2C123F, 0x2C123F, 0x4F2C6C, 0x4F2C6C
.word 0x4F2C6C, 0x4F2C6C, 0x2C123F, 0x2C123F, 0x2C123F, 0x4F2C6C, 0x4F2C6C, 0x4F2C6C, 0x2C123F, 0x4F2C6C, 0x2C123F, 0x4F2C6C, 0x2C123F, 0x4F2C6C, 0x2C123F, 0x4F2C6C, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x4F2C6C, 0x4F2C6C, 0x4F2C6C, 0x2C123F, 0x2C123F, 0x4F2C6C, 0x4F2C6C
.word 0x4F2C6C, 0x4F2C6C, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x4F2C6C, 0x2C123F, 0x4F2C6C, 0x2C123F, 0x4F2C6C, 0x2C123F, 0x4F2C6C, 0x2C123F, 0x4F2C6C, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x4F2C6C, 0x4F2C6C, 0x4F2C6C, 0x000000, 0x2C123F, 0x4F2C6C, 0x4F2C6C
.word 0x4F2C6C, 0x4F2C6C, 0x2C123F, 0x2C123F, 0x2C123F, 0x4F2C6C, 0x4F2C6C, 0x4F2C6C, 0x2C123F, 0x4F2C6C, 0x4F2C6C, 0x4F2C6C, 0x2C123F, 0x4F2C6C, 0x4F2C6C, 0x4F2C6C, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x4F2C6C, 0x4F2C6C, 0x4F2C6C, 0x000000, 0x2C123F, 0x4F2C6C, 0x4F2C6C
.word 0x4F2C6C, 0x4F2C6C, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x4F2C6C, 0x4F2C6C, 0x4F2C6C, 0x000000, 0x2C123F, 0x4F2C6C, 0x4F2C6C
.word 0x4F2C6C, 0x4F2C6C, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x4F2C6C, 0x4F2C6C, 0x4F2C6C, 0x2C123F, 0x4F2C6C, 0x2C123F, 0x4F2C6C, 0x2C123F, 0x4F2C6C, 0x2C123F, 0x4F2C6C, 0x4F2C6C, 0x4F2C6C, 0x2C123F, 0x4F2C6C, 0x4F2C6C, 0x4F2C6C, 0x000000, 0x2C123F, 0x4F2C6C, 0x4F2C6C
.word 0x4F2C6C, 0x4F2C6C, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x4F2C6C, 0x2C123F, 0x4F2C6C, 0x2C123F, 0x4F2C6C, 0x2C123F, 0x4F2C6C, 0x2C123F, 0x4F2C6C, 0x2C123F, 0x2C123F, 0x4F2C6C, 0x2C123F, 0x2C123F, 0x4F2C6C, 0x4F2C6C, 0x4F2C6C, 0x000000, 0x2C123F, 0x4F2C6C, 0x4F2C6C
.word 0x4F2C6C, 0x4F2C6C, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x4F2C6C, 0x2C123F, 0x4F2C6C, 0x2C123F, 0x4F2C6C, 0x2C123F, 0x4F2C6C, 0x2C123F, 0x4F2C6C, 0x2C123F, 0x2C123F, 0x4F2C6C, 0x2C123F, 0x2C123F, 0x4F2C6C, 0x4F2C6C, 0x4F2C6C, 0x2C123F, 0x2C123F, 0x4F2C6C, 0x4F2C6C
.word 0x4F2C6C, 0x4F2C6C, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x4F2C6C, 0x4F2C6C, 0x4F2C6C, 0x2C123F, 0x4F2C6C, 0x2C123F, 0x4F2C6C, 0x2C123F, 0x4F2C6C, 0x2C123F, 0x2C123F, 0x4F2C6C, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x000000, 0x2C123F, 0x4F2C6C, 0x4F2C6C
.word 0x4F2C6C, 0x4F2C6C, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x4F2C6C, 0x2C123F, 0x4F2C6C, 0x4F2C6C, 0x4F2C6C, 0x2C123F, 0x4F2C6C, 0x2C123F, 0x2C123F, 0x4F2C6C, 0x2C123F, 0x2C123F, 0x4F2C6C, 0x4F2C6C, 0x4F2C6C, 0x000000, 0x2C123F, 0x4F2C6C, 0x4F2C6C
.word 0x4F2C6C, 0x4F2C6C, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x4F2C6C, 0x4F2C6C, 0x4F2C6C, 0x000000, 0x2C123F, 0x4F2C6C, 0x4F2C6C
.word 0x4F2C6C, 0x4F2C6C, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x000000, 0x000000, 0x000000, 0x2C123F, 0x4F2C6C, 0x4F2C6C
.word 0x4F2C6C, 0x4F2C6C, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x4F2C6C, 0x4F2C6C
.word 0x4F2C6C, 0x4F2C6C, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0xA770D6, 0xA770D6, 0xA770D6, 0xA770D6, 0xA770D6, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x4F2C6C, 0x4F2C6C
.word 0x4F2C6C, 0x4F2C6C, 0x2C123F, 0x2C123F, 0x2C123F, 0xA770D6, 0xA770D6, 0xA770D6, 0xA770D6, 0xA770D6, 0xA770D6, 0xA770D6, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x4F2C6C, 0x4F2C6C
.word 0x4F2C6C, 0x4F2C6C, 0x2C123F, 0x2C123F, 0x2C123F, 0xA770D6, 0x2C123F, 0x2C123F, 0xA770D6, 0x2C123F, 0x2C123F, 0xA770D6, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x4F2C6C, 0x4F2C6C
.word 0x4F2C6C, 0x4F2C6C, 0x2C123F, 0x2C123F, 0x2C123F, 0xA770D6, 0xA770D6, 0xA770D6, 0xA770D6, 0xA770D6, 0xA770D6, 0xA770D6, 0x000000, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x4F2C6C, 0x4F2C6C
.word 0x4F2C6C, 0x4F2C6C, 0x2C123F, 0x2C123F, 0x2C123F, 0xA770D6, 0xA770D6, 0xA770D6, 0xA770D6, 0xA770D6, 0xA770D6, 0xA770D6, 0x000000, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x4F2C6C, 0x4F2C6C
.word 0x4F2C6C, 0x4F2C6C, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0xA770D6, 0xA770D6, 0xA770D6, 0xA770D6, 0xA770D6, 0x000000, 0x000000, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x4F2C6C, 0x4F2C6C
.word 0x4F2C6C, 0x4F2C6C, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0xA770D6, 0x2C123F, 0xA770D6, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x4F2C6C, 0x4F2C6C
.word 0x4F2C6C, 0x4F2C6C, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x4F2C6C, 0x4F2C6C
.word 0x4F2C6C, 0x5A3278, 0x5A3278, 0x5A3278, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x5A3278, 0x5A3278, 0x5A3278, 0x4F2C6C
.word 0x4F2C6C, 0x4F2C6C, 0x4F2C6C, 0x5A3278, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x5A3278, 0x4F2C6C, 0x4F2C6C, 0x4F2C6C
.word 0x4F2C6C, 0x4F2C6C, 0x4F2C6C, 0x5A3278, 0x4F2C6C, 0x4F2C6C, 0x4F2C6C, 0x4F2C6C, 0x4F2C6C, 0x4F2C6C, 0x4F2C6C, 0x4F2C6C, 0x4F2C6C, 0x4F2C6C, 0x4F2C6C, 0x4F2C6C, 0x4F2C6C, 0x4F2C6C, 0x4F2C6C, 0x4F2C6C, 0x4F2C6C, 0x4F2C6C, 0x4F2C6C, 0x4F2C6C, 0x4F2C6C, 0x4F2C6C, 0x4F2C6C, 0x4F2C6C, 0x5A3278, 0x4F2C6C, 0x4F2C6C, 0x4F2C6C
.word 0x4F2C6C, 0x4F2C6C, 0x4F2C6C, 0x4F2C6C, 0x4F2C6C, 0x4F2C6C, 0x4F2C6C, 0x4F2C6C, 0x4F2C6C, 0x4F2C6C, 0x4F2C6C, 0x4F2C6C, 0x4F2C6C, 0x4F2C6C, 0x4F2C6C, 0x4F2C6C, 0x4F2C6C, 0x4F2C6C, 0x4F2C6C, 0x4F2C6C, 0x4F2C6C, 0x4F2C6C, 0x4F2C6C, 0x4F2C6C, 0x4F2C6C, 0x4F2C6C, 0x4F2C6C, 0x4F2C6C, 0x4F2C6C, 0x4F2C6C, 0x4F2C6C, 0x4F2C6C

over_graphic:
.word 0x4F2C6C, 0x4F2C6C, 0x4F2C6C, 0x4F2C6C, 0x4F2C6C, 0x4F2C6C, 0x4F2C6C, 0x4F2C6C, 0x4F2C6C, 0x4F2C6C, 0x4F2C6C, 0x4F2C6C, 0x4F2C6C, 0x4F2C6C, 0x4F2C6C, 0x4F2C6C, 0x4F2C6C, 0x4F2C6C, 0x4F2C6C, 0x4F2C6C, 0x4F2C6C, 0x4F2C6C, 0x4F2C6C, 0x4F2C6C, 0x4F2C6C, 0x4F2C6C, 0x4F2C6C, 0x4F2C6C, 0x4F2C6C, 0x4F2C6C, 0x4F2C6C, 0x4F2C6C
.word 0x4F2C6C, 0x4F2C6C, 0x4F2C6C, 0x5A3278, 0x4F2C6C, 0x4F2C6C, 0x4F2C6C, 0x4F2C6C, 0x4F2C6C, 0x4F2C6C, 0x4F2C6C, 0x4F2C6C, 0x4F2C6C, 0x4F2C6C, 0x4F2C6C, 0x4F2C6C, 0x4F2C6C, 0x4F2C6C, 0x4F2C6C, 0x4F2C6C, 0x4F2C6C, 0x4F2C6C, 0x4F2C6C, 0x4F2C6C, 0x4F2C6C, 0x4F2C6C, 0x4F2C6C, 0x4F2C6C, 0x5A3278, 0x4F2C6C, 0x4F2C6C, 0x4F2C6C
.word 0x4F2C6C, 0x4F2C6C, 0x4F2C6C, 0x5A3278, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x5A3278, 0x4F2C6C, 0x4F2C6C, 0x4F2C6C
.word 0x4F2C6C, 0x5A3278, 0x5A3278, 0x5A3278, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x5A3278, 0x5A3278, 0x5A3278, 0x4F2C6C
.word 0x4F2C6C, 0x4F2C6C, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x4F2C6C, 0x4F2C6C
.word 0x4F2C6C, 0x4F2C6C, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x4F2C6C, 0x4F2C6C
.word 0x4F2C6C, 0x4F2C6C, 0x2C123F, 0x4F2C6C, 0x4F2C6C, 0x4F2C6C, 0x4F2C6C, 0x2C123F, 0x4F2C6C, 0x4F2C6C, 0x4F2C6C, 0x4F2C6C, 0x2C123F, 0x4F2C6C, 0x4F2C6C, 0x4F2C6C, 0x4F2C6C, 0x4F2C6C, 0x2C123F, 0x4F2C6C, 0x4F2C6C, 0x4F2C6C, 0x4F2C6C, 0x2C123F, 0x2C123F, 0x4F2C6C, 0x4F2C6C, 0x4F2C6C, 0x2C123F, 0x2C123F, 0x4F2C6C, 0x4F2C6C
.word 0x4F2C6C, 0x4F2C6C, 0x2C123F, 0x4F2C6C, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x4F2C6C, 0x2C123F, 0x2C123F, 0x4F2C6C, 0x2C123F, 0x4F2C6C, 0x4F2C6C, 0x4F2C6C, 0x4F2C6C, 0x4F2C6C, 0x2C123F, 0x4F2C6C, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x4F2C6C, 0x4F2C6C, 0x4F2C6C, 0x2C123F, 0x2C123F, 0x4F2C6C, 0x4F2C6C
.word 0x4F2C6C, 0x4F2C6C, 0x2C123F, 0x4F2C6C, 0x2C123F, 0x4F2C6C, 0x4F2C6C, 0x2C123F, 0x4F2C6C, 0x4F2C6C, 0x4F2C6C, 0x4F2C6C, 0x2C123F, 0x4F2C6C, 0x2C123F, 0x4F2C6C, 0x2C123F, 0x4F2C6C, 0x2C123F, 0x4F2C6C, 0x4F2C6C, 0x4F2C6C, 0x4F2C6C, 0x2C123F, 0x2C123F, 0x4F2C6C, 0x4F2C6C, 0x4F2C6C, 0x000000, 0x2C123F, 0x4F2C6C, 0x4F2C6C
.word 0x4F2C6C, 0x4F2C6C, 0x2C123F, 0x4F2C6C, 0x2C123F, 0x2C123F, 0x4F2C6C, 0x2C123F, 0x4F2C6C, 0x2C123F, 0x2C123F, 0x4F2C6C, 0x2C123F, 0x4F2C6C, 0x2C123F, 0x2C123F, 0x2C123F, 0x4F2C6C, 0x2C123F, 0x4F2C6C, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x4F2C6C, 0x4F2C6C, 0x4F2C6C, 0x000000, 0x2C123F, 0x4F2C6C, 0x4F2C6C
.word 0x4F2C6C, 0x4F2C6C, 0x2C123F, 0x4F2C6C, 0x2C123F, 0x2C123F, 0x4F2C6C, 0x2C123F, 0x4F2C6C, 0x2C123F, 0x2C123F, 0x4F2C6C, 0x2C123F, 0x4F2C6C, 0x2C123F, 0x2C123F, 0x2C123F, 0x4F2C6C, 0x2C123F, 0x4F2C6C, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x4F2C6C, 0x4F2C6C, 0x4F2C6C, 0x000000, 0x2C123F, 0x4F2C6C, 0x4F2C6C
.word 0x4F2C6C, 0x4F2C6C, 0x2C123F, 0x4F2C6C, 0x4F2C6C, 0x4F2C6C, 0x4F2C6C, 0x2C123F, 0x4F2C6C, 0x2C123F, 0x2C123F, 0x4F2C6C, 0x2C123F, 0x4F2C6C, 0x2C123F, 0x2C123F, 0x2C123F, 0x4F2C6C, 0x2C123F, 0x4F2C6C, 0x4F2C6C, 0x4F2C6C, 0x4F2C6C, 0x2C123F, 0x2C123F, 0x4F2C6C, 0x4F2C6C, 0x4F2C6C, 0x000000, 0x2C123F, 0x4F2C6C, 0x4F2C6C
.word 0x4F2C6C, 0x4F2C6C, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x4F2C6C, 0x4F2C6C, 0x4F2C6C, 0x000000, 0x2C123F, 0x4F2C6C, 0x4F2C6C
.word 0x4F2C6C, 0x4F2C6C, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x4F2C6C, 0x4F2C6C, 0x4F2C6C, 0x4F2C6C, 0x2C123F, 0x4F2C6C, 0x2C123F, 0x2C123F, 0x4F2C6C, 0x2C123F, 0x4F2C6C, 0x4F2C6C, 0x4F2C6C, 0x2C123F, 0x4F2C6C, 0x4F2C6C, 0x4F2C6C, 0x4F2C6C, 0x2C123F, 0x4F2C6C, 0x4F2C6C, 0x4F2C6C, 0x000000, 0x2C123F, 0x4F2C6C, 0x4F2C6C
.word 0x4F2C6C, 0x4F2C6C, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x4F2C6C, 0x2C123F, 0x2C123F, 0x4F2C6C, 0x2C123F, 0x4F2C6C, 0x2C123F, 0x2C123F, 0x4F2C6C, 0x2C123F, 0x4F2C6C, 0x2C123F, 0x2C123F, 0x2C123F, 0x4F2C6C, 0x2C123F, 0x2C123F, 0x4F2C6C, 0x2C123F, 0x4F2C6C, 0x4F2C6C, 0x4F2C6C, 0x000000, 0x2C123F, 0x4F2C6C, 0x4F2C6C
.word 0x4F2C6C, 0x4F2C6C, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x4F2C6C, 0x2C123F, 0x2C123F, 0x4F2C6C, 0x2C123F, 0x4F2C6C, 0x2C123F, 0x2C123F, 0x4F2C6C, 0x2C123F, 0x4F2C6C, 0x4F2C6C, 0x4F2C6C, 0x2C123F, 0x4F2C6C, 0x4F2C6C, 0x4F2C6C, 0x4F2C6C, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x4F2C6C, 0x4F2C6C
.word 0x4F2C6C, 0x4F2C6C, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x4F2C6C, 0x2C123F, 0x2C123F, 0x4F2C6C, 0x2C123F, 0x2C123F, 0x4F2C6C, 0x4F2C6C, 0x2C123F, 0x2C123F, 0x4F2C6C, 0x2C123F, 0x2C123F, 0x2C123F, 0x4F2C6C, 0x2C123F, 0x4F2C6C, 0x2C123F, 0x2C123F, 0x4F2C6C, 0x4F2C6C, 0x4F2C6C, 0x000000, 0x2C123F, 0x4F2C6C, 0x4F2C6C
.word 0x4F2C6C, 0x4F2C6C, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x4F2C6C, 0x4F2C6C, 0x4F2C6C, 0x4F2C6C, 0x2C123F, 0x2C123F, 0x4F2C6C, 0x4F2C6C, 0x2C123F, 0x2C123F, 0x4F2C6C, 0x4F2C6C, 0x4F2C6C, 0x2C123F, 0x4F2C6C, 0x2C123F, 0x2C123F, 0x4F2C6C, 0x2C123F, 0x4F2C6C, 0x4F2C6C, 0x4F2C6C, 0x000000, 0x2C123F, 0x4F2C6C, 0x4F2C6C
.word 0x4F2C6C, 0x4F2C6C, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x000000, 0x000000, 0x000000, 0x2C123F, 0x4F2C6C, 0x4F2C6C
.word 0x4F2C6C, 0x4F2C6C, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x4F2C6C, 0x4F2C6C
.word 0x4F2C6C, 0x4F2C6C, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0xA770D6, 0xA770D6, 0xA770D6, 0xA770D6, 0xA770D6, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x4F2C6C, 0x4F2C6C
.word 0x4F2C6C, 0x4F2C6C, 0x2C123F, 0x2C123F, 0x2C123F, 0xA770D6, 0xA770D6, 0xA770D6, 0xA770D6, 0xA770D6, 0xA770D6, 0xA770D6, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x4F2C6C, 0x4F2C6C
.word 0x4F2C6C, 0x4F2C6C, 0x2C123F, 0x2C123F, 0x2C123F, 0xA770D6, 0x2C123F, 0x2C123F, 0xA770D6, 0x2C123F, 0x2C123F, 0xA770D6, 0x000000, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x4F2C6C, 0x4F2C6C
.word 0x4F2C6C, 0x4F2C6C, 0x2C123F, 0x2C123F, 0x2C123F, 0xA770D6, 0xA770D6, 0xA770D6, 0xA770D6, 0xA770D6, 0xA770D6, 0xA770D6, 0x000000, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x4F2C6C, 0x4F2C6C
.word 0x4F2C6C, 0x4F2C6C, 0x2C123F, 0x2C123F, 0x2C123F, 0xA770D6, 0xA770D6, 0xA770D6, 0xA770D6, 0xA770D6, 0xA770D6, 0xA770D6, 0x000000, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x4F2C6C, 0x4F2C6C
.word 0x4F2C6C, 0x4F2C6C, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0xA770D6, 0xA770D6, 0xA770D6, 0xA770D6, 0xA770D6, 0x000000, 0x000000, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x4F2C6C, 0x4F2C6C
.word 0x4F2C6C, 0x4F2C6C, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0xA770D6, 0x2C123F, 0xA770D6, 0x000000, 0x000000, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x4F2C6C, 0x4F2C6C
.word 0x4F2C6C, 0x4F2C6C, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x4F2C6C, 0x4F2C6C
.word 0x4F2C6C, 0x5A3278, 0x5A3278, 0x5A3278, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x5A3278, 0x5A3278, 0x5A3278, 0x4F2C6C
.word 0x4F2C6C, 0x4F2C6C, 0x4F2C6C, 0x5A3278, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x5A3278, 0x4F2C6C, 0x4F2C6C, 0x4F2C6C
.word 0x4F2C6C, 0x4F2C6C, 0x4F2C6C, 0x5A3278, 0x4F2C6C, 0x4F2C6C, 0x4F2C6C, 0x4F2C6C, 0x4F2C6C, 0x4F2C6C, 0x4F2C6C, 0x4F2C6C, 0x4F2C6C, 0x4F2C6C, 0x4F2C6C, 0x4F2C6C, 0x4F2C6C, 0x4F2C6C, 0x4F2C6C, 0x4F2C6C, 0x4F2C6C, 0x4F2C6C, 0x4F2C6C, 0x4F2C6C, 0x4F2C6C, 0x4F2C6C, 0x4F2C6C, 0x4F2C6C, 0x5A3278, 0x4F2C6C, 0x4F2C6C, 0x4F2C6C
.word 0x4F2C6C, 0x4F2C6C, 0x4F2C6C, 0x4F2C6C, 0x4F2C6C, 0x4F2C6C, 0x4F2C6C, 0x4F2C6C, 0x4F2C6C, 0x4F2C6C, 0x4F2C6C, 0x4F2C6C, 0x4F2C6C, 0x4F2C6C, 0x4F2C6C, 0x4F2C6C, 0x4F2C6C, 0x4F2C6C, 0x4F2C6C, 0x4F2C6C, 0x4F2C6C, 0x4F2C6C, 0x4F2C6C, 0x4F2C6C, 0x4F2C6C, 0x4F2C6C, 0x4F2C6C, 0x4F2C6C, 0x4F2C6C, 0x4F2C6C, 0x4F2C6C, 0x4F2C6C
pause_graphic: 
.word 0x4F2C6C, 0x4F2C6C, 0x4F2C6C, 0x4F2C6C, 0x4F2C6C, 0x4F2C6C, 0x4F2C6C, 0x4F2C6C, 0x4F2C6C, 0x4F2C6C, 0x4F2C6C, 0x4F2C6C, 0x4F2C6C, 0x4F2C6C, 0x4F2C6C, 0x4F2C6C, 0x4F2C6C, 0x4F2C6C, 0x4F2C6C, 0x4F2C6C, 0x4F2C6C, 0x4F2C6C, 0x4F2C6C, 0x4F2C6C, 0x4F2C6C, 0x4F2C6C, 0x4F2C6C, 0x4F2C6C, 0x4F2C6C, 0x4F2C6C, 0x4F2C6C, 0x4F2C6C
.word 0x4F2C6C, 0x4F2C6C, 0x4F2C6C, 0x5A3278, 0x4F2C6C, 0x4F2C6C, 0x4F2C6C, 0x4F2C6C, 0x4F2C6C, 0x4F2C6C, 0x4F2C6C, 0x4F2C6C, 0x4F2C6C, 0x4F2C6C, 0x4F2C6C, 0x4F2C6C, 0x4F2C6C, 0x4F2C6C, 0x4F2C6C, 0x4F2C6C, 0x4F2C6C, 0x4F2C6C, 0x4F2C6C, 0x4F2C6C, 0x4F2C6C, 0x4F2C6C, 0x4F2C6C, 0x4F2C6C, 0x5A3278, 0x4F2C6C, 0x4F2C6C, 0x4F2C6C
.word 0x4F2C6C, 0x4F2C6C, 0x4F2C6C, 0x5A3278, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x5A3278, 0x4F2C6C, 0x4F2C6C, 0x4F2C6C
.word 0x4F2C6C, 0x5A3278, 0x5A3278, 0x5A3278, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x5A3278, 0x5A3278, 0x5A3278, 0x4F2C6C
.word 0x4F2C6C, 0x4F2C6C, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x4F2C6C, 0x4F2C6C
.word 0x4F2C6C, 0x4F2C6C, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x4F2C6C, 0x4F2C6C
.word 0x4F2C6C, 0x4F2C6C, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x4F2C6C, 0x4F2C6C
.word 0x4F2C6C, 0x4F2C6C, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x4F2C6C, 0x4F2C6C
.word 0x4F2C6C, 0x4F2C6C, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x4F2C6C, 0x4F2C6C
.word 0x4F2C6C, 0x4F2C6C, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x4F2C6C, 0x4F2C6C
.word 0x4F2C6C, 0x4F2C6C, 0x2C123F, 0x2C123F, 0x2C123F, 0x4F2C6C, 0x2C123F, 0x2C123F, 0x2C123F, 0x4F2C6C, 0x2C123F, 0x4F2C6C, 0x4F2C6C, 0x4F2C6C, 0x4F2C6C, 0x2C123F, 0x4F2C6C, 0x2C123F, 0x4F2C6C, 0x4F2C6C, 0x4F2C6C, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x4F2C6C, 0x4F2C6C
.word 0x4F2C6C, 0x4F2C6C, 0x2C123F, 0x2C123F, 0x2C123F, 0x4F2C6C, 0x2C123F, 0x2C123F, 0x2C123F, 0x4F2C6C, 0x2C123F, 0x4F2C6C, 0x2C123F, 0x2C123F, 0x4F2C6C, 0x2C123F, 0x4F2C6C, 0x2C123F, 0x2C123F, 0x4F2C6C, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x4F2C6C, 0x4F2C6C
.word 0x4F2C6C, 0x4F2C6C, 0x2C123F, 0x2C123F, 0x2C123F, 0x4F2C6C, 0x2C123F, 0x4F2C6C, 0x2C123F, 0x4F2C6C, 0x2C123F, 0x4F2C6C, 0x4F2C6C, 0x4F2C6C, 0x4F2C6C, 0x2C123F, 0x4F2C6C, 0x2C123F, 0x2C123F, 0x4F2C6C, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x4F2C6C, 0x4F2C6C
.word 0x4F2C6C, 0x4F2C6C, 0x2C123F, 0x2C123F, 0x2C123F, 0x4F2C6C, 0x2C123F, 0x4F2C6C, 0x2C123F, 0x4F2C6C, 0x2C123F, 0x4F2C6C, 0x2C123F, 0x2C123F, 0x4F2C6C, 0x2C123F, 0x4F2C6C, 0x2C123F, 0x2C123F, 0x4F2C6C, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x4F2C6C, 0x4F2C6C
.word 0x4F2C6C, 0x4F2C6C, 0x2C123F, 0x2C123F, 0x2C123F, 0x4F2C6C, 0x4F2C6C, 0x4F2C6C, 0x4F2C6C, 0x4F2C6C, 0x2C123F, 0x4F2C6C, 0x2C123F, 0x2C123F, 0x4F2C6C, 0x2C123F, 0x4F2C6C, 0x2C123F, 0x2C123F, 0x4F2C6C, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x4F2C6C, 0x4F2C6C
.word 0x4F2C6C, 0x4F2C6C, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x4F2C6C, 0x4F2C6C
.word 0x4F2C6C, 0x4F2C6C, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0xA770D6, 0xA770D6, 0xA770D6, 0xA770D6, 0xA770D6, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x4F2C6C, 0x2C123F, 0x4F2C6C, 0x2C123F, 0x2C123F, 0x4F2C6C, 0x2C123F, 0x4F2C6C, 0x4F2C6C, 0x4F2C6C, 0x4F2C6C, 0x2C123F, 0x2C123F, 0x2C123F, 0x4F2C6C, 0x4F2C6C
.word 0x4F2C6C, 0x4F2C6C, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0xA770D6, 0xA770D6, 0xA770D6, 0xA770D6, 0xA770D6, 0xA770D6, 0xA770D6, 0x2C123F, 0x2C123F, 0x2C123F, 0x4F2C6C, 0x2C123F, 0x4F2C6C, 0x4F2C6C, 0x2C123F, 0x4F2C6C, 0x2C123F, 0x4F2C6C, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x4F2C6C, 0x4F2C6C
.word 0x4F2C6C, 0x4F2C6C, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0xA770D6, 0x2C123F, 0x2C123F, 0xA770D6, 0x2C123F, 0x2C123F, 0xA770D6, 0x000000, 0x2C123F, 0x2C123F, 0x4F2C6C, 0x2C123F, 0x4F2C6C, 0x2C123F, 0x4F2C6C, 0x4F2C6C, 0x2C123F, 0x4F2C6C, 0x2C123F, 0x4F2C6C, 0x4F2C6C, 0x2C123F, 0x2C123F, 0x2C123F, 0x4F2C6C, 0x4F2C6C
.word 0x4F2C6C, 0x4F2C6C, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0xA770D6, 0xA770D6, 0xA770D6, 0xA770D6, 0xA770D6, 0xA770D6, 0xA770D6, 0x000000, 0x2C123F, 0x2C123F, 0x4F2C6C, 0x2C123F, 0x4F2C6C, 0x2C123F, 0x2C123F, 0x4F2C6C, 0x2C123F, 0x4F2C6C, 0x2C123F, 0x2C123F, 0x4F2C6C, 0x2C123F, 0x2C123F, 0x2C123F, 0x4F2C6C, 0x4F2C6C
.word 0x4F2C6C, 0x4F2C6C, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0xA770D6, 0xA770D6, 0xA770D6, 0xA770D6, 0xA770D6, 0xA770D6, 0xA770D6, 0x000000, 0x2C123F, 0x2C123F, 0x4F2C6C, 0x2C123F, 0x4F2C6C, 0x2C123F, 0x2C123F, 0x4F2C6C, 0x2C123F, 0x4F2C6C, 0x4F2C6C, 0x4F2C6C, 0x4F2C6C, 0x2C123F, 0x2C123F, 0x2C123F, 0x4F2C6C, 0x4F2C6C
.word 0x4F2C6C, 0x4F2C6C, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0xA770D6, 0xA770D6, 0xA770D6, 0xA770D6, 0xA770D6, 0x000000, 0x000000, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x4F2C6C, 0x4F2C6C
.word 0x4F2C6C, 0x4F2C6C, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0xA770D6, 0x2C123F, 0xA770D6, 0x000000, 0x000000, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x4F2C6C, 0x4F2C6C
.word 0x4F2C6C, 0x4F2C6C, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x4F2C6C, 0x4F2C6C
.word 0x4F2C6C, 0x4F2C6C, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x4F2C6C, 0x4F2C6C
.word 0x4F2C6C, 0x4F2C6C, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x4F2C6C, 0x4F2C6C
.word 0x4F2C6C, 0x4F2C6C, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x4F2C6C, 0x4F2C6C
.word 0x4F2C6C, 0x4F2C6C, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x4F2C6C, 0x4F2C6C
.word 0x4F2C6C, 0x5A3278, 0x5A3278, 0x5A3278, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x5A3278, 0x5A3278, 0x5A3278, 0x4F2C6C
.word 0x4F2C6C, 0x4F2C6C, 0x4F2C6C, 0x5A3278, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x2C123F, 0x5A3278, 0x4F2C6C, 0x4F2C6C, 0x4F2C6C
.word 0x4F2C6C, 0x4F2C6C, 0x4F2C6C, 0x5A3278, 0x4F2C6C, 0x4F2C6C, 0x4F2C6C, 0x4F2C6C, 0x4F2C6C, 0x4F2C6C, 0x4F2C6C, 0x4F2C6C, 0x4F2C6C, 0x4F2C6C, 0x4F2C6C, 0x4F2C6C, 0x4F2C6C, 0x4F2C6C, 0x4F2C6C, 0x4F2C6C, 0x4F2C6C, 0x4F2C6C, 0x4F2C6C, 0x4F2C6C, 0x4F2C6C, 0x4F2C6C, 0x4F2C6C, 0x4F2C6C, 0x5A3278, 0x4F2C6C, 0x4F2C6C, 0x4F2C6C
.word 0x4F2C6C, 0x4F2C6C, 0x4F2C6C, 0x4F2C6C, 0x4F2C6C, 0x4F2C6C, 0x4F2C6C, 0x4F2C6C, 0x4F2C6C, 0x4F2C6C, 0x4F2C6C, 0x4F2C6C, 0x4F2C6C, 0x4F2C6C, 0x4F2C6C, 0x4F2C6C, 0x4F2C6C, 0x4F2C6C, 0x4F2C6C, 0x4F2C6C, 0x4F2C6C, 0x4F2C6C, 0x4F2C6C, 0x4F2C6C, 0x4F2C6C, 0x4F2C6C, 0x4F2C6C, 0x4F2C6C, 0x4F2C6C, 0x4F2C6C, 0x4F2C6C, 0x4F2C6C

num_0: 
    .word 1 1 1
    .word 1 0 1
    .word 1 0 1
    .word 1 0 1
    .word 1 1 1

num_1:
    .word 0 1 0
    .word 1 1 0
    .word 0 1 0
    .word 0 1 0
    .word 1 1 1

num_2:
    .word 1 1 1
    .word 0 0 1
    .word 1 1 1
    .word 1 0 0
    .word 1 1 1

num_3:
    .word 1 1 1
    .word 0 0 1
    .word 0 1 1
    .word 0 0 1
    .word 1 1 1

num_4:
    .word 1 0 1
    .word 1 0 1
    .word 1 1 1
    .word 0 0 1
    .word 0 0 1

num_5:
    .word 1 1 1
    .word 1 0 0
    .word 1 1 1
    .word 0 0 1
    .word 1 1 1

num_6:
    .word 1 1 1
    .word 1 0 0
    .word 1 1 1
    .word 1 0 1
    .word 1 1 1

num_7:
    .word 1 1 1
    .word 0 0 1
    .word 0 1 0
    .word 0 1 0
    .word 0 1 0

num_8:
    .word 1 1 1
    .word 1 0 1
    .word 1 1 1
    .word 1 0 1
    .word 1 1 1

num_9:
    .word 1 1 1
    .word 1 0 1
    .word 1 1 1
    .word 0 0 1
    .word 1 1 1

#Spawning points for the other tetrinominos 
spawn_T_y: .word 0, 1, 1, 1    #holds relative addresses for the storage of a tetrinomino - T shape (y value)
spawn_T_x: .word 6, 5, 6, 7    #holds relative addresses for the storage of a tetrinomino - T shape (x value)

spawn_J_y: .word 0, 1, 1, 1    #holds relative addresses for the storage of a tetrinomino - J shape (y value)
spawn_J_x: .word 5, 5, 6, 7    #holds relative addresses for the storage of a tetrinomino - J shape (x value)

spawn_L_y: .word 0, 1, 1, 1    #holds relative addresses for the storage of a tetrinomino -l shape (y value)
spawn_L_x: .word 6, 6, 5, 4    #holds relative addresses for the storage of a tetrinomino - J shape (x value)

spawn_S_y: .word 1, 1, 0, 0    #holds relative addresses for the storage of a tetrinomino - S shape (y value)
spawn_S_x: .word 5, 6, 6, 7    #holds relative addresses for the storage of a tetrinomino - S shape (x value)

spawn_Z_y: .word 0, 0, 1, 1    #holds relative addresses for the storage of a tetrinomino - Z shape (y value)
spawn_Z_x: .word 5, 6, 6, 7    #holds relative addresses for the storage of a tetrinomino - Z shape (x value)

spawn_O_y: .word 0, 0, 1, 1    #holds relative addresses for the storage of a tetrinomino - O shape (y value)
spawn_O_x: .word 6, 7, 6, 7    #holds relative addresses for the storage of a tetrinomino - O shape (x value)

spawn_I_y: .word 0, 0, 0, 0    #holds relative addresses for the storage of a tetrinomino - I shape (y value)
spawn_I_x: .word 5, 6, 7, 8    #holds relative addresses for the storage of a tetrinomino - I shape (x value)


##############################################################################
# Mutable Data
##############################################################################
current_tet_y: .word 0, 1, 1, 1    #holds relative addresses for the storage of a tetrinomino - y value
current_tet_x: .word 6, 5, 6, 7    #holds relative addresses for the storage of a tetrinomino - x value

new_tet_y: .word 0, 1, 1, 1        #for collision detection, holds the potential row, column values
new_tet_x: .word 6, 5, 6, 7        #for collision detection, holds the potential row, column values

board: .word 0:1024 #a 32x32 board holding filled spots; 1 if filled, 0 if not (but only a portion is used)

next_block: .word 0
current_block: .word 0

gravity:      .word 30       # initial gravity delay (lower means faster)
gravity_tick: .word 50       # tick at last gravity change
tick_counter: .word 0        # counts #of ticks

prev_score:   .word 0        # last score gravity changed at
score: .word 0               #holds score of player

##############################################################################
# Code
##############################################################################
.text
.globl main

# Run the Tetris game.
main:
    # Initialize the game
    li $v1, 0
    jal play_start_music
    jal init_game
    jal init_screen
    
game_loop:
    # Load score and prev_score
    lw $a0, score 
    lw $a1, prev_score 

    beq $a0, $zero, increment_tick     
    beq $a0, $a1, increment_tick         

    # Check if score mod 3 == 0
    li $t1, 3
    div $a0, $t1
    mfhi $a2
    bne $a2, $zero, increment_tick       # skip if not multiple of 3

    # score is a multiple of 3
    lw $t2, gravity
    blt  $t2, 1, skip_gravity_update
    addi $t2, $t2, -3                   
skip_gravity_update:
    sw $t2, gravity
    sw $a0, prev_score                  # update prev_score with current

increment_tick:
    lw $a0, tick_counter
    addi $a0, $a0, 1
    sw $a0, tick_counter

    lw $a2, gravity_tick
    lw $a3, gravity
    sub $t0, $a0, $a2                    # tick_counter - gravity_tick
    blt $t0, $a3, after_simulate_gravity

    sw $a0, gravity_tick                # gravity_tick
    li $a1, 0x73                        # simulate gravity 
    j load_keypress

after_simulate_gravity:
    lw $t7, ADDR_KBRD    
    lw $t8, 0($t7)
    beq $t8, 1, keypress_happened
   
after_key_press:
    #Check if score is 999 (or greater), then cap the score! [at that point you've capped the score]
    lw $a0, score 
    blt $a0, 999, no_cap_score
    li $t1, 999
    sw $t1, score
    sw $t1, prev_score
no_cap_score:
    #DRAW THE SCREEN
    jal drawn_boxL
    #do the rest
    jal clear_line           # clear full lines after locking
    jal draw_sbox
    jal lower_row
    jal paint_pattern        # clear screen or background
    jal draw_board           # draw locked blocks after line clear
    jal draw_tet             # draw current piece
    jal check_below_purple   # do locking if needed

    li $v0, 32
    li $a0, 50    #sleep 50 milli seconds
    syscall

    b game_loop
    
end_game: 
    #draw the graphic 
    jal play_quit_music
    jal you_over
    #check if user wants to retry, or branch to quit
    end_game_loop:
    lw $t7, ADDR_KBRD   
    lw $t8, 0($t7)
    bne $t8, 1, end_game_loop
    lw $a1, 4($t7)   # Load second word from keyboard
    beq $a1, 0x71, quit_game #end game
    beq $a1, 0x72, main    #restart game
    j end_game_loop
quit_game:
    jal play_quit_music
    jal you_quit
    li $v0, 10
    syscall
pause_game:
    jal play_start_music
    la $t1, pause_graphic
    lw $a0, ADDR_DSPL
    li $t0, 0
pause_graphic_loop:
    lw $t3, 0($t1)
    sw $t3, 0($a0)
    addi $a0, $a0, 4
    addi $t1, $t1, 4
    addi $t0, $t0, 1
    bne $t0, 1024, pause_graphic_loop
    
pause_game_loop:
    lw $t7, ADDR_KBRD   
    lw $t8, 0($t7)
    bne $t8, 1, pause_game_loop
    lw $t8, 4($t7)
    bne $t8, 0x70, pause_game_loop
    jal init_screen
    b after_key_press

#KEYPRESS FUNCTIONS 

#Music functions 
play_rotate_music:
    li $a0, 27
    li $a1, 50
    li $a2, 53     
    li $a3, 100    
    li $v0, 31
    syscall

    jr $ra

play_drop_music:
    li $a0, 21
    li $a1, 50
    li $a2, 53     
    li $a3, 100     
    li $v0, 31
    syscall

    jr $ra

play_LR_music:
    li $a0, 23
    li $a1, 50
    li $a2, 53     
    li $a3, 100     
    li $v0, 31
    syscall

    jr $ra

play_start_music:
    li $v0, 31       
    li $a0, 72       
    li $a1, 100      
    li $a2, 112      
    li $a3, 15          
    syscall        
    
    li $v0, 32       
    li $a0, 100     
    syscall

    jr $ra

play_quit_music:
    li $t0, 2
    loop_quit_music:
        li $v0, 31       
        li $a0, 72       
        li $a1, 300      
        li $a2, 112      
        li $a3, 2    
        syscall
    
        li $v0, 32        
        li $a0, 150      
        syscall
    
        li $v0, 31
        li $a0, 68       
        li $a1, 300
        li $a2, 112
        li $a3, 2
        syscall
    
        li $v0, 32
        li $a0, 150
        syscall
     
        li $v0, 31
        li $a0, 64       
        li $a1, 500     
        li $a2, 112
        li $a3, 2      
        syscall
        addi $t0, $t0, -1
        bne $t0, 0, loop_quit_music
        jr $ra

keypress_happened: 
    #load the current_tet address from display 
    # la $a0, current_tet #load address of current_tet
    lw $a1, 4($t7)   # Load second word from keyboard
    #call function to copy curr -> new 
load_keypress:
    #Push addresses into stack as well 
    addi $sp, $sp, -4   # move stack pointer one word
    sw $s1, 0($sp)      # push 
    addi $sp, $sp, -4   # move stack pointer one word
    sw $s2, 0($sp)      # push 
    addi $sp, $sp, -4   # move stack pointer one word
    sw $s3, 0($sp)      # push 
    addi $sp, $sp, -4   # move stack pointer one word
    sw $s4, 0($sp)      # push 
    jal copy_tet_coords
    
    #Jump to functions depending on whether a key was pressed 
    beq $a1, 0x61, respond_to_a #move left
    beq $a1, 0x64, respond_to_d #move right
    beq $a1, 0x73, respond_to_s #move down
    beq $a1, 0x77, respond_to_w #rotate
    beq $a1, 0x71, quit_game #end game
    beq $a1, 0x70, pause_game
    beq $a1, 0x72, main    #restart game
    b after_key_press

respond_to_w:
    jal play_rotate_music
    li $a2, 4        #load a counter
    # use index 2 as center point
    lw $t4, 8($s3)              # load into $t4, x coord
    lw $t5, 8($s4)              # load into $t5, y coord
    li $a2, 12                  # change the counter for arr
rotate_loop:
    add $t7, $s3, $a2           #  new_tet_x[i]
    add $t8, $s4, $a2           #  new_tet_y[i]

    lw $t1, 0($t7)              # x = new_tet_x[i]
    lw $t2, 0($t8)              # y = new_tet_y[i]

    sub $t9, $t1, $t4           # rel_x = x - center_x
    sub $t3, $t2, $t5           # rel_y = y - center_y

    # rot_x = rel_y, rot_y = -rel_x (90 degree transformation clockwise?)
    add $t1, $t4, $t3           # new_x = center_x + rel_y
    sub $t2, $t5, $t9           # new_y = center_y - rel_x

    # store new_x and new_y
    sw $t1, 0($t7)
    sw $t2, 0($t8)

    addi $a2, $a2, -4
    bgez $a2, rotate_loop      

end_rotate:
    addi $sp, $sp, -4   # move stack pointer one word
    sw $s3, 0($sp)      # push 
    addi $sp, $sp, -4   # move stack pointer one word
    sw $s4, 0($sp)      # push 

    #call function to copy values 
    li $v1, 0
    jal collision_detection
    b after_key_press
    
respond_to_a:
    jal play_LR_music
    li $a2, 4        #load a counter
    move $t4, $s3
resp_a:   
    lw $t0, 0($t4)        #get value at new_tet_x[i]
    addi $t0, $t0, -1     #offset the value by -1
    sw $t0, 0($t4)        #store the value in new_tet_x[i]
    addi $t4, $t4, 4
    addi $a2, $a2, -1    #decrement counter
    bgtz $a2, resp_a
    
    addi $sp, $sp, -4   # move stack pointer one word
    sw $s3, 0($sp)      # push 
    addi $sp, $sp, -4   # move stack pointer one word
    sw $s4, 0($sp)      # push 

    #call function to copy values
    li $v1, 0
    jal collision_detection
    b after_key_press

respond_to_d:
    jal play_LR_music
    li $a2, 4        #load a counter
    move $t4, $s3         # load into $t4, new_tet_x
resp_d:
    lw $t0, 0($t4)       #get value at new_tet_x[i]
    addi $t0, $t0, 1     #offset the value by 1
    sw $t0, 0($t4)       #store the value in new_tet_x[i]
    addi $t4, $t4, 4
    addi $a2, $a2, -1    #decrement counter
    bgtz $a2, resp_d
 
    addi $sp, $sp, -4   # move stack pointer one word
    sw $s3, 0($sp)      # push 
    addi $sp, $sp, -4   # move stack pointer one word
    sw $s4, 0($sp)      # push 
    li $v1, 0
    jal collision_detection
    b after_key_press
    
respond_to_s:
    jal play_drop_music
    li $a2, 4        #load a counter
    move $t4, $s4         # load into $t4, new_tet_y
resp_s:
    lw $t0, 0($t4)        #get value at new_tet_y[i]
    addi $t0, $t0, 1      #offset the value by 1
    sw $t0, 0($t4)        #store the value in new_tet_y[i]
    addi $t4, $t4, 4
    addi $a2, $a2, -1    #decrement counter
    bgtz $a2, resp_s

    addi $sp, $sp, -4   # move stack pointer one word
    sw $s3, 0($sp)      # push 
    addi $sp, $sp, -4   # move stack pointer one word
    sw $s4, 0($sp)      # push 

    jal collision_detection
    b after_key_press

#Special case - when the user presses down key. Instead. you must check: [1] (if y + 1, where y is row#, is taken or is the ground) [2] as a result, add it to the board and 'lock it'
#Function checks if below is purple (or the ground, so you must lock it as a result)
check_below_purple:
    li $t8, 4          
    move $t4, $s1      #  curr_tet_x
    move $t5, $s2      #  curr_tet_y
    move $t6, $s5      # board address

check_below_loop:
    lw $t0, 0($t4)           # load x
    lw $t1, 0($t5)           # load y
    bge $t1, 23, lock_block  #if you're at the bottom, lock it 
    addi $t1, $t1, 1         #check if spots below are taken, so add 1 to y

    mul $t2, $t1, 128        
    mul $t0, $t0, 4        
    add $t2, $t2, $t0       # total offset 
    add $t3, $t6, $t2       # final address 

    lw $t7, 0($t3)           # load value
    bne $t7, $zero, lock_block

    addi $t4, $t4, 4         # increment
    addi $t5, $t5, 4         # increment 
    addi $t8, $t8, -1        

    bgtz $t8, check_below_loop  

    jr $ra                   #no collision found

#else, lock the block 
lock_block: 
    lw $a0, ADDR_DSPL
    move $a1, $s7
    li $a2, 4
    sw $ra, -4($sp)   #store $ra
    addi $sp, $sp, -4
    move $t3, $s1         # load into $t3, curr_tet_x
    move $t4, $s2         # load into $t4, curr_tet_y
lock_loop:
    lw $t0, 0($t3)    #get value at curr_tet_x[i] 
    sw $t0, -4($sp)   # push x
    lw $t0, 0($t4)    #get value at curr_tet_y[i]
    sw $t0, -8($sp)   # push y
    addi $sp, $sp, -8         
    
    jal calc_x_y              # compute offset
    
    lw $t0, 0($sp)            # load offset from stack
    addi $sp, $sp, 4         

    # store it in the board
    move $t1, $s5
    add $t1, $t1, $t0
    li $t2, 1
    sw $t2, 0($t1)
    
    addi $t3, $t3, 4
    addi $t4, $t4, 4    #increment
    addi $a2, $a2, -1    #decrement counter
    bgtz $a2, lock_loop

#Function checks if you can spawn
check_spawn:
    li $t8, 4              # counter
    #change current = next
    la $t5, current_block
    lw $t6, next_block
    sw $t6, 0($t5)
    jal load_next_piece    #load next piece 
    lw $a0, current_block
    
    bne $a0, 0, spawn_L
        la $t4, spawn_T_x      # pointer to spawn_x
        la $t5, spawn_T_y      # pointer to spawn_y
        lw $s7, TET_TCOL
        j after_spawn_load
spawn_L:
     bne $a0, 1, spawn_Z
        la $t4, spawn_L_x      # pointer to spawn_x
        la $t5, spawn_L_y      # pointer to spawn_y
        lw $s7, TET_LCOL
        j after_spawn_load
spawn_Z:
     bne $a0, 2, spawn_S
        la $t4, spawn_Z_x      # pointer to spawn_x
        la $t5, spawn_Z_y      # pointer to spawn_y
        lw $s7, TET_ZCOL
        j after_spawn_load
spawn_S:
     bne $a0, 3, spawn_J
        la $t4, spawn_S_x      # pointer to spawn_x
        la $t5, spawn_S_y      # pointer to spawn_y
        lw $s7, TET_SCOL
        j after_spawn_load
spawn_J:
     bne $a0, 4, spawn_O
        la $t4, spawn_J_x      # pointer to spawn_x
        la $t5, spawn_J_y      # pointer to spawn_y
        lw $s7, TET_JCOL
        j after_spawn_load
spawn_O:
     bne $a0, 5, spawn_I
        la $t4, spawn_O_x      # pointer to spawn_x
        la $t5, spawn_O_y      # pointer to spawn_y
        lw $s7, TET_OCOL
        j after_spawn_load
spawn_I:
     bne $a0, 6, after_spawn_load
        la $t4, spawn_I_x      # pointer to spawn_x
        la $t5, spawn_I_y      # pointer to spawn_y
        lw $s7, TET_ICOL

after_spawn_load:
    move $t2, $s1            # holds curr_tet_x
    move $t3, $s2            # holds curr_tet_y
    move $t6, $s5          # board
can_spawn: 
    lw $t0, 0($t4)           # load x
    lw $t1, 0($t5)           # load y

    sw $t0, 0($t2)    #store value at curr_tet_x[i]
    sw $t1, 0($t3)    #store value at curr_tet_x[i] 

    mul $t1, $t1, 128        # offset_y = y*128
    mul $t0, $t0, 4          # offset_x = x*4
    add $t1, $t1, $t0        # total offset 
    add $t1, $t1, $t6       # final address 

    lw $t7, 0($t1)           # load board value
    bne $t7, $zero, no_spawn

    #change spawn/curr_x, spawn/curr_y
    addi $t2, $t2, 4         
    addi $t3, $t3, 4          
    addi $t4, $t4, 4        
    addi $t5, $t5, 4         
    addi $t8, $t8, -1        

    bgtz $t8, can_spawn  
    # restore $ra and respawn
    lw $ra, 0($sp)
    addi $sp, $sp, 4
    jr $ra

no_spawn:   #jump directly to here if can't spawn
    lw $ra, 0($sp)
    addi $sp, $sp, 4
    
    j end_game

load_next_piece: 
    #First, randomly generate which to spawn 
    #choose a random number from 0 to 6; based on the number load a specfic thing 
    li $v0, 42
    li $a0, 0
    li $a1, 7
    syscall
    la $t5, next_block
    sw $a0, 0($t5)    #push result to memory where next pives
    jr $ra

#COLLISION DETECTION FUNCTIONS 
    
#Function checks collision with sides of the wall, or the bottom wall, or if it occupies space
#Gets passed (new_tet_x, new_tet_y). These were calculated in the keypress functions.
#Return value: 1 in $v0 if valid, 0 if not
collision_detection: 
    #Pop off from stack 
    lw $t1, 0($sp)    #pops off new_tet_y
    lw $t0, 4($sp)    #pops off new_tet_x
    addi $sp, $sp, 8  #reclaim space
    li $a2, 4        #load a counter
    move $t6, $s5    #holds board address

    #Holds temp new_tet_y, new_tet_x
    move $t5, $t1    #holds y
    move $t4, $t0    #holds x

wall_coll:
    #load X value
    lw $t2, 0($t4)
    #load Y value
    lw $t3, 0($t5)
else_wall:
    #check if respective X, Y values are valid 
    blt $t2, 3, collision
    bgt $t2, 12, collision
    blt $t3, 0, collision
    bgt $t3, 24, collision
    #add counter, go next
    addi $t4, $t4, 4
    addi $t5, $t5, 4
    addi $a2, $a2, -1
    bgtz $a2, wall_coll

    #check whether the space is occupied or not - traverse through an array 
    move $t5, $t1    #holds y
    move $t4, $t0    #holds x
    li $a2, 4        #load a counter
space_occupied:
    #load X value
    lw $t2, 0($t4)
    #load Y value
    lw $t3, 0($t5)
    move $t6, $s5    #re-instantiate board address

else_space:
    #calculate offset to access board[y][x] (noting that x is for x coordinate, y for y coord in cartesian plane)
    mul $t7, $t3, 32
    add $t7, $t7, $t2
    mul $t7, $t7, 4
    add $t6, $t6, $t7    #add it to the board address, to access value 
    #load address in temp var 
    lw $t8, 0($t6)
    #check if space is occupied (a 1 or 0) [a non-zero value means it is occupied] [change logic if error later on]
    bne $t8, $zero, collision
    #else continue, increment counter, etc. 
    addi $t4, $t4, 4
    addi $t5, $t5, 4
    addi $a2, $a2, -1
    bgtz $a2, space_occupied

#if we have reached this part, then it is valid!, we can change the coord values 
#call function to copy new -> curr 
    addi $sp, $sp, -4   # move stack pointer one word
    sw $ra, 0($sp)      # push a word onto the stack
    #Push addresses into stack as well 
    addi $sp, $sp, -4   # move stack pointer one word
    sw $s3, 0($sp)      # push 
    addi $sp, $sp, -4   # move stack pointer one word
    sw $s4, 0($sp)      # push 
    addi $sp, $sp, -4   # move stack pointer one word
    sw $s1, 0($sp)      # push 
    addi $sp, $sp, -4   # move stack pointer one word
    sw $s2, 0($sp)      # push 
    jal copy_tet_coords
    lw $ra, 0($sp)      # pop from stack
    addi $sp, $sp, 4 

    li $v0, 1    #load a 1 (meaning no collision)
    jr $ra

collision:
    li $v0, 0    #load a 0 (meaning collision)
    jr $ra

#function lowers line after cleared 

lower_row:
    la $a0, board
    li $t0, 23 #row number
    li $t1, 0  #col number 
iterate_through_row: 
        li $t1, 0  #col number 
        #First, check if the row is empty 
        move $t2, $t0  #temp to store the row (y) number
        li $t3, 12      #another temp to store a temporary column number
    check_row_empty:
        #calculate the offset
        mul $t4, $t2, 128
        mul $t7, $t3, 4      #32*4*y
        add $t4, $t4, $t7    #4(y*32+x)
        add $t4, $t4, $a0
        #store the value from board 
        lw $t5, 0($t4)
        #check if its non-zero, if so, exit early 
        bne $t5, $zero, row_not_empty
        #if not, then continue iterating 
        addi $t3, $t3, -1
        bge $t3, $zero, check_row_empty

    #if we have reached this part, then we can lower the rows by one 
    move $t2, $t0  #temp to store the row number
    li $t3, 12      #another temp to store a temporary column number
    iterate_shift_row:
        li $t3, 12
    iterate_shift_col:
        #calculate board[row][col], board[row-1][col]
        #first calculate board[row][col]
        mul $t4, $t2, 128
        mul $t7, $t3, 4    #32*4*y
         add $t4, $t4, $t7    #4(y*32+x)
        add $t4, $t4, $a0
        #store board[row][col] = board[row-1][col]
        #note that addr(board[row-1][col]) = addr(board[row-1][col])-128
        #store board[row][col] in a temp $t5, board[row-1][col] in $t6
        add $t4, $t4, -128    #go to addr of r-1
        lw $t5, 0($t4)
        #store in addr of r-1, value of $t5
        add $t4, $t4, 128
        sw $t5, 0($t4)    #store here, value of r-1 in $t4 which is [row][col]

        #increment col counter
        addi $t3, $t3, -1
        bge $t3, $zero, iterate_shift_col

        #increment row 
        addi $t2, $t2, -1
    bge $t2, 1, iterate_shift_row

    #after entire thing ends, fill the top row only with zeros
    move $t8, $a0
    li $t1, 13
    fill_top_zero:
        sw $zero, 0($t8)
        addi $t8, $t8, 4
        addi $t1, $t1, -1
        bne $t1, $zero, fill_top_zero
        
        addi $t0, $t0, -1     
        
        beq $t0, $zero, end_lower_row
    j after_branch

    row_not_empty:
        addi $t0, $t0, -1
    after_branch:
    bge $t0, $zero, iterate_through_row

end_lower_row:
    jr $ra
    
#Function checks if lines are completed, if so; erase from the 'board' array 
clear_line:
    # Save return address
    addi $sp, $sp, -4
    sw $ra, 0($sp)

    li $t0, 0                 # y = 0 (this is the row in matrix)
clear_line_row_loop:
    li $t2, 0                 #temp counter (to see if count = 10)
    li $t1, 0                 # x = 0 (this is the col in matrix)
    li $t3, 128               #load (32*4, as x = 0) 
    mul $t3, $t3, $t0         #stores board[y][0]
clear_line_col_loop:
    # Compute offset for address board[y][x]
    sw $t1, -4($sp)    #push x, then y
    sw $t0, -8($sp)
    addi $sp, $sp, -8

    jal calc_x_y

    lw $t6, 0($sp)            # offset result
    addi $sp, $sp, 4 

    add $t8, $t6, $s5        #get the address
    lw $t8, 0($t8)           #load the value in same variable for simplicity 
    beq $t8, 0, clear_line_else
    addi $t2, $t2, 1        #increment by 1

clear_line_else:
    #check here if counter is greater than equal to 10, then branch, clear_row and branch back
    bge $t2, 10, clear_row
    
    addi $t1, $t1, 1
    blt $t1, 15, clear_line_col_loop

after_clear_row:
    addi $t0, $t0, 1
    blt $t0, 25, clear_line_row_loop

    #redraw the bottom graphics 
    jal draw_bottomp
    jal draw_graphic
    jal draw_botttomt
    jal draw_accents
    
    # Restore and return
    lw $ra, 0($sp)
    addi $sp, $sp, 4
    jr $ra

clear_row:
    #add to score
    la $a2, score
    lw $a3, 0($a2)
    addi $a3, $a3, 1
    sw $a3, 0($a2)
    #do the animations 
    lw $a1, ADDR_DSPL
    lw $t9, ACCENT_LIGHT
    #draw the exclamation marks

    sw $t9, 3468($a1)
    sw $t9, 3596($a1)
    sw $t9, 3852($a1)

    li $v0, 32
    li $a0, 100    #sleep 100 milli seconds
    syscall

    sw $t9, 3476($a1)
    sw $t9, 3604($a1)
    sw $t9, 3860($a1)

    li $v0, 32
    li $a0, 100    #sleep 100 milli seconds
    syscall

    sw $t9, 3484($a1)
    sw $t9, 3612($a1)
    sw $t9, 3868($a1)

    li $v0, 32
    li $a0, 100    #sleep 100 milli seconds
    syscall

    sw $t9, 3492($a1)
    sw $t9, 3620($a1)
    sw $t9, 3876($a1)

    li $v0, 32
    li $a0, 100    #sleep 100 milli seconds
    syscall

    sw $t9, 3500($a1)
    sw $t9, 3628($a1)
    sw $t9, 3884($a1)

    li $v0, 32
    li $a0, 100    #sleep 100 milli seconds
    syscall

    lw $t4, ADDR_DSPL
    li $a1, 0x4c2354     #some colour 
    addi $t4, $t4, 12
    add $t4, $t4, $t3

    li $t1, 0
#first, fill the line with a given red colour, then clear it 
fill_red: 
    sw $a1, 0($t4) #store 0 in that pixel, then increment
    addi $t4, $t4, 4
    
    addi $t1, $t1, 1
    blt $t1, 10, fill_red    

    li $v0, 32
    li $a0, 500    #sleep 200 milli seconds
    syscall
    
add $t3, $t3, $s5
li $t1, 0
clear_row_loop:
    #use $t3 
    sw $zero, 0($t3) #store 0 in that pixel, then increment
    addi $t3, $t3, 4
    
    addi $t1, $t1, 1
    blt $t1, 15, clear_row_loop
    b after_clear_row

#Function copies new tet coordinates
#Parameters (src1, src2, dest1, dest2) Copies src to dest.
copy_tet_coords:
    lw $t3, 0($sp)      # dest_2
    lw $t2, 4($sp)      # dest_1
    lw $t1, 8($sp)      # src_2
    lw $t0, 12($sp)     # src_1
    addi $sp, $sp, 16

    li $t4, 0           # index = 0

copy_loop:
    lw  $t5, 0($t0)     # t5 = src_1[i]
    sw  $t5, 0($t2)     # dest_1[i] = t5
    lw  $t6, 0($t1)     # t6 = src_2[i]
    sw  $t6, 0($t3)     # dest_2[i] = t6

    addi $t0, $t0, 4    
    addi $t1, $t1, 4    
    addi $t2, $t2, 4    
    addi $t3, $t3, 4    

    addi $t4, $t4, 1
    blt  $t4, 4, copy_loop

    jr $ra


#COORDINATE CALCULATION FUNCTIONS 

#Calculates the offset value (the one used in framebuffer; based on indexing)
calc_x_y: 
    #Pop y, then x from stack into t5, t6 [loaded x, then y]
    lw $t5, 0($sp)
    lw $t6, 4($sp)
    addi $sp, $sp, 8  #reclaim space
    mul $t5, $t5, 32 #store y*32
    add $t5, $t5, $t6 #store y*32 + x
    mul $t5, $t5, 4   #multiply by 4
    #Push offset onto stack
    addi $sp, $sp, -4
    sw $t5, 0($sp) 
    jr $ra        #return 

#DRAWING FUNCTIONS - I have a lot...
draw_board:
    # Save return address
    addi $sp, $sp, -4
    sw $ra, 0($sp)

    lw $a0, ADDR_DSPL         # display 
    li $a1, 0x4B0DBF          # color
    la $a2, board             # board 

    li $t0, 0                 # y = 0

draw_board_row_loop:
    li $t1, 0                 # x = 0

draw_board_col_loop:
    # Compute offset for address board[y][x]
    sw $t1, -4($sp)    #push x, then push y
    sw $t0, -8($sp)
    addi $sp, $sp, -8

    jal calc_x_y

    lw $t6, 0($sp)            # offset result
    addi $sp, $sp, 4 

    add $t8, $t6, $a2        #get the address
    lw $t8, 0($t8)           #load the value in same variable for simplicity 
    
    beqz $t8, skip_draw       # skip if zero

    #else, paint it!
    add $t8, $t6, $a0        #get the address
    sw $a1, 0($t8)           # paint

skip_draw:
    addi $t1, $t1, 1
    blt $t1, 32, draw_board_col_loop

    addi $t0, $t0, 1
    blt $t0, 32, draw_board_row_loop

    # Restore and return
    lw $ra, 0($sp)
    addi $sp, $sp, 4
    jr $ra

#Function draws the current tetrinomino
draw_tet:
    lw $a0, ADDR_DSPL         # base address of display
    move $a1, $s7          
    move $a2, $s1             # current_tet_x 
    move $a3, $s2             # current_tet_y 
    li $t0, 4                 # 4 times loop

paint_tet:
    lw $t1, 0($a2)            # x = current_tet_x[i]
    lw $t2, 0($a3)            # y = current_tet_y[i]

    # push $ra, x, y
    sw $ra, -4($sp)
    sw $t1, -8($sp)            # push x
    sw $t2, -12($sp)           # push y
    addi $sp, $sp, -12
    
    jal calc_x_y              # compute offset
    
    lw $t1, 0($sp)            # load offset from stack
    lw $ra, 4($sp)            # restore $ra
    addi $sp, $sp, 8          

    add $t1, $a0, $t1         # base + offset is address
    sw $s7, 0($t1)            # paint pixel

    addi $a2, $a2, 4          # next x
    addi $a3, $a3, 4          # next y
    addi $t0, $t0, -1
    bgtz $t0, paint_tet

    jr $ra

#Function initalizes the screen 
init_screen: 
    addi $sp, $sp, -4   # move stack pointer one word
    sw $ra, 0($sp)      # push a word onto the stack
    jal draw_row        # draw base grid rows
    jal draw_bottomp    # draw the bottom block
    jal draw_botttomt   # draw accents on the bottom line
    jal draw_sbox       # draw score box
    jal drawn_box       # draw background of next piece box
    jal draw_accents    # accent
    jal paint_pattern   # draw checkerboard
    jal draw_graphic
    lw $ra, 0($sp)      # pop from stack
    addi $sp, $sp, 4
    jr $ra              #return address

#Function initalizes the game (and draws a lot of stuff)
init_game: 
    #Clear the board first 
    li $t1, 0
    lw $s7, TET_TCOL #set the colour initially to be default tetrinomino 
clear_board:
    la $t0, board
    add $t0, $t0, $t1
    sw $zero, 0($t0)
    addi $t1, $t1, 4
    blt $t1, 4096, clear_board
    #After clearing board, re-initalize everything!
    #re-initalize score 
    la $t1, score
    sw $zero 0($t1)
    la $t1, prev_score
    sw $zero, 0($t1)
    #reinitalize current/new_tet_x, current/new_tet_y to be spawning default (fix it to be T-shape for simplicity)
    la $t4, spawn_T_x
    la $t5, spawn_T_y
    la $t2, new_tet_x
    la $t3, new_tet_y
    la $t6, current_tet_x
    la $t7, current_tet_y
    li $t8, 4
init_tet: 
    lw $t0, 0($t4)           # load x
    lw $t1, 0($t5)           # load y

    sw $t0, 0($t2)    #store value at curr_tet_x[i]
    sw $t1, 0($t3)    #store value at curr_tet_y[i] 
    sw $t0, 0($t6)    #store value at new_x[i]
    sw $t1, 0($t7)    #store value at new_y[i] 

    #change spawn/curr_tet_x, spawn/curr_tet_y
    addi $t2, $t2, 4         
    addi $t3, $t3, 4          
    addi $t4, $t4, 4        
    addi $t5, $t5, 4  
    addi $t6, $t6, 4         
    addi $t7, $t7, 4   
    addi $t8, $t8, -1        

    bgtz $t8, init_tet  
    
    # base address of y, and y array; i do this in case anything bad occurs 
    la $s1, current_tet_x       
    la $s2, current_tet_y 
    la $s3, new_tet_x      
    la $s4, new_tet_y
    la $s5, board
    la $s6, score    #hold the score; DO NOT MODIFY!!!!!

    #do other stuff too (by default set first tet to be T-shape, second one to be smthn else)
    la $t0, current_block
    sw $zero, 0($t0)
    la $t0, next_block
    li $t1, 1
    sw $t1, 0($t0)
    la $t0, gravity_tick
    sw $zero, 0($t0)
    la $t0, gravity_tick
    li $t1, 50
    sw $t1, 0($t0)

    li $t1, 30
    sw $t1, gravity
    li $t1, 50
    sw $t1, gravity_tick
    sw $zero, tick_counter 
    sw $zero, prev_score

    jr $ra

#Function draws rows with the columns for the tetris
#draws a total of 24 rows
draw_row:
    lw $a0, ADDR_DSPL
    lw $a1, PURP_BKGND       # background colour
    lw $a2, ACCENT_DARK      # dark accent colour
    li $t1, 0                # $t1 = row index

row_loop:
    li $t2, 0                # $t2 = column index (0 to 31)

col_loop:
    # Check if we want to draw accent colour
    beq $t2, 1, draw_accent
    beq $t2, 2, draw_accent
    beq $t2, 13, draw_accent
    beq $t2, 14, draw_accent

draw_regular:
    sw $a1, 0($a0)
    j advance

draw_accent:
    sw $a2, 0($a0)

advance:
    addi $a0, $a0, 4         # move to next square
    addi $t2, $t2, 1         # we moved col
    blt  $t2, 32, col_loop   # loop over col

    addi $t1, $t1, 1         # next row
    blt  $t1, 24, row_loop   # loop 24 rows
    jr $ra

#Function draws the bottom part [last 8 rows] of the bitmap, which is just all purple 
draw_bottomp:
    lw $a0, ADDR_DSPL
    lw $a1, PURP_BKGND      # purple color
    li $t1, 384             

addi $t0, $a0, 3072       # compute address to write to
draw_bot:
    sw $a1, 0($t0)          # paint
    addi $t0, $t0, 4        
    addi $t1, $t1, -1       # decrement 
    bnez $t1, draw_bot      # loop if not zero
    jr $ra

#Function draws the 'bottom' part of the tetris area, which requires special accents 
draw_botttomt:
    lw $a1, ACCENT_DARK      # dark accent color
    addi $t1, $a0, 3076
    li $t0, 14

paint_bot:
    sw $a1, 0($t1)           # store dark color
    addi $t1, $t1, 4         # next pixel
    addi $t0, $t0, -1
    bgtz $t0, paint_bot
    jr $ra

#Function just draws a silly little graphic

draw_graphic:
    # lw $a0, ADDR_DSPL
    la $t0, graphic_offsets
    la $t1, graphic_colors
    li $t2, 0
graphic_loop:
    lw $t4, 0($t0)           # load offset address
    lw $t5, 0($t1)           # load color address

    add $t6, $a0, $t4        # base + offset
    sw  $t5, 0($t6)          # store the colour in t5 register

    addi $t0, $t0, 4
    addi $t1, $t1, 4
    addi $t2, $t2, 1

    blt $t2, 49, graphic_loop #branch if less than 49 pixels
    jr $ra

#Function draws a box for the score (if implemented)
draw_sbox: 
    lw $a0, ADDR_DSPL
    lw $a1, ACCENT_DARK
    li $a2, 9
    addi $t0, $a0, 252 #temp variable to store address

draw_scorebox: 
    addi $t0, $t0, 68
    addi $a2, $a2, -1
    li $t1, 15
draw_scorebox_row: 
    sw $a1 0($t0)
    addi $t0, $t0, 4
    addi $t1, $t1, -1
    bgtz $t1, draw_scorebox_row
    bgtz $a2, draw_scorebox

#draw the score 
draw_score: 
    lw $a0, ADDR_DSPL
    lw $a1, TET_ICOL
    la  $t2, score     # load address into $t2
    #check if score is over 999, then cap to 999
    lw  $t1, 0($t2)    # load val
    blt $t1, 999, no_cap
    li $t1, 999
no_cap:
    # lw $t1, score
    li $t3, 10
    li $t2, 3    #counter
draw_score_loop: 
#do 3 times in total - from ones, to tens, to hundreds 
    div $t1, $t1, $t3    #store int(t1/t3) $t1 
    mfhi $t0             #store modulo 
    mflo $t1
    li $t5, 4    
    beq $t0, 0, draw_zero
    beq $t0, 1, draw_one
    beq $t0, 2, draw_two
    beq $t0, 3, draw_three
    beq $t0, 4, draw_four
    beq $t0, 5, draw_five
    beq $t0, 6, draw_six
    beq $t0, 7, draw_seven
    beq $t0, 8, draw_eight
    beq $t0, 9, draw_nine

after_draw_num:
    addi $t2, $t2, -1
    bge $t2, $zero, draw_score_loop 
after_draw_score:
    jr $ra

draw_zero:
    #draw the zero 
    la $a2, num_0
    j draw_num
draw_one:
    #draw the one 
    la $a2, num_1
    j draw_num
draw_two:
    #draw the two 
    la $a2, num_2
    j draw_num
draw_three:
    #draw the three 
    la $a2, num_3
    j draw_num
draw_four:
    #draw the four 
    la $a2, num_4
    j draw_num
draw_five:
    #draw the five 
    la $a2, num_5
    j draw_num
draw_six:
    #draw the six 
    la $a2, num_6
    j draw_num
draw_seven:
    #draw the seven 
    la $a2, num_7
    j draw_num
draw_eight:
    #draw the eight 
    la $a2, num_8
    j draw_num
draw_nine: 
    #draw the nine 
    la $a2, num_9
draw_num: 
    li $t7, 5    #store row counter
    #row loop
draw_num_row: 
    #ones digit, start from x = 26, y = 4
    #tens digit, start from x = 22, y = 4
    #hundreds digit, start from x = 18, y = 4 -> as a result, check $t2 counter 
    beq $t2, 3, load_one
    beq $t2, 2, load_tens
    beq $t2, 1, load_hundreds
    j after_draw_num   # skip loop if $t2 invalid
load_one:
    li $t4, 26
    j after_load_decimal
load_tens:
    li $t4, 22
    j after_load_decimal
load_hundreds:
    li $t4, 18
after_load_decimal:
    li $t8, 3    #store col counter
    #col loop 
draw_num_col: 
    #obtain value from array 
    lw $t6, 0($a2)
    #check if zero or one
    beq $t6, $zero, inc_draw_num
    #if it is a 1, paint it in the ADDR_DISPL, using given x val and y 
    # Compute the address 
    mul $t6, $t5, 128 #do y*32*4
    mul $t9, $t4, 4   #do x*4
    add $t6, $t6, $t9
    add $t6, $t6, $a0 #compute offset to access, and store 
    sw $a1, 0($t6)
    #ones digit, start from x = 26, y = 4
    
inc_draw_num: 
    #increment 
    addi $t4, $t4, 1
    addi $a2, $a2, 4
    addi $t8, $t8, -1 #decrement col 
    #branching conditions 
    bgt $t8, $zero, draw_num_col
    #decrement row 
    addi $t7, $t7, -1
    addi $t5, $t5, 1 #add to x 1
    bgt $t7, $zero, draw_num_row

    j after_draw_num

#Function draws the 'background for the next block box' [if implemented]
drawn_box: 
    lw $a0, ADDR_DSPL
    lw $a1, ACCENT_LIGHT
    li $a2, 11
    addi $t0, $a0, 1524 #temp variable to store address

draw_nextbox: 
    addi $t0, $t0, 84
    addi $a2, $a2, -1
    li $t1, 11
draw_nextbox_row: 
    sw $a1 0($t0)
    addi $t0, $t0, 4
    addi $t1, $t1, -1
    bgtz $t1, draw_nextbox_row
    bgtz $a2, draw_nextbox

#Function fills the nextbox with a light colour 
drawn_boxL: 
    lw $a0, ADDR_DSPL
    lw $a1, CHECK_LIGHT
    li $a2, 7
    addi $t0, $a0, 1772 #temp variable to store address

draw_nextboxL: 
    addi $t0, $t0, 100
    addi $a2, $a2, -1
    li $t1, 7
draw_nextbox_rowL: 
    sw $a1 0($t0)
    addi $t0, $t0, 4
    addi $t1, $t1, -1
    bgtz $t1, draw_nextbox_rowL
    bgtz $a2, draw_nextboxL

#Function draws the 'next' piece in the block 
#load the 'next block'
draw_next_block:
    lw $a0, ADDR_DSPL
    lw $a1, SPRITE_PURPLE
    #check the value in 'next_block'
    lw $a2, next_block
    beq $a2, 0, draw_T
    beq $a2, 1, draw_L
    beq $a2, 2, draw_Z
    beq $a2, 3, draw_S
    beq $a2, 4, draw_J
    beq $a2, 5, draw_O
    #order is T, L Z, S, J, O, I
draw_I:
    sw $a1, 2140($a0)
    sw $a1, 2268($a0)
    sw $a1, 2396($a0)
    sw $a1, 2524($a0)
    j draw_next_end
draw_T:
    sw $a1, 2268($a0)
    sw $a1, 2396($a0)
    sw $a1, 2392($a0)
    sw $a1, 2400($a0)
    j draw_next_end
draw_L:
    sw $a1, 2136($a0)
    sw $a1, 2264($a0)
    sw $a1, 2392($a0)
    sw $a1, 2396($a0)
    j draw_next_end
draw_Z:
    sw $a1, 2136($a0)
    sw $a1, 2140($a0)
    sw $a1, 2268($a0)
    sw $a1, 2272($a0)
    j draw_next_end
draw_S:
    sw $a1, 2140($a0)
    sw $a1, 2144($a0)
    sw $a1, 2268($a0)
    sw $a1, 2264($a0)
    j draw_next_end
draw_J:
    sw $a1, 2140($a0)
    sw $a1, 2268($a0)
    sw $a1, 2396($a0)
    sw $a1, 2392($a0)
    j draw_next_end
draw_O:
    sw $a1, 2140($a0)
    sw $a1, 2136($a0)
    sw $a1, 2268($a0)
    sw $a1, 2264($a0)
    
draw_next_end:
    jr $ra

#Function draws accents in specfic spots if needed
draw_accents:
    # lw $a0, ADDR_DSPL
    lw $a1, ACCENT_LIGHT
    
    sw $a1 3076($a0)
    sw $a1 2948($a0)
    sw $a1 2996($a0)
    sw $a1 3000($a0)
    
    sw $a1 2952($a0)
    sw $a1 3080($a0)
    sw $a1 3124($a0)
    sw $a1 3128($a0)

    sw $a1 320($a0)
    sw $a1 376($a0)
    sw $a1 1344($a0)
    sw $a1 1400($a0)

    jr $ra

paint_pattern: 
    lw $a0, ADDR_DSPL
    lw $a1, CHECK_DARK       # checkerboard dark colour
    lw $a2, CHECK_LIGHT      # checkerboard light colour
    #store temp address 
    li $t1, 24              #of rows to draw
    addi $t0, $a0, 12       # compute address to write to
    #use $t2 to store temp var (checking even or odd)

#Function draws the pattern
change_pat: 
    andi $t2, $t1, 1      #check if even or odd [even if 0, odd if 1]
    #Jump to even-row pattern 
    beq $t2, $zero, even_row
#Draw the odd row 
odd_row: 
    sw $a2 0($t0)
    sw $a1 4($t0)
    sw $a2 8($t0)
    sw $a1 12($t0)
    sw $a2 16($t0)
    sw $a1 20($t0)
    sw $a2 24($t0)
    sw $a1 28($t0)
    sw $a2 32($t0)
    sw $a1 36($t0)
    j inc
even_row:
    sw $a1 0($t0)
    sw $a2 4($t0)
    sw $a1 8($t0)
    sw $a2 12($t0)
    sw $a1 16($t0)
    sw $a2 20($t0)
    sw $a1 24($t0)
    sw $a2 28($t0)
    sw $a1 32($t0)
    sw $a2 36($t0)   
inc:
    addi $t0, $t0, 128
    addi $t1, $t1, -1
bgtz $t1, change_pat
jr $ra    

#You quit screen
you_quit:
    lw $a0, ADDR_DSPL     
    la $a1, quit_graphic  
    li $t0, 0
you_quit_loop:
    lw $t2, 0($a1)       
    sw $t2, 0($a0)      
    addi $a1, $a1, 4
    addi $a0, $a0, 4
    addi $t0, $t0, 1
    blt $t0, 1024, you_quit_loop
    jr $ra

#lose graphic
you_over:
    lw $a0, ADDR_DSPL     
    la $a1, over_graphic 
    li $t0, 0
you_over_loop:
    lw $t2, 0($a1)       
    sw $t2, 0($a0)      
    addi $a1, $a1, 4
    addi $a0, $a0, 4
    addi $t0, $t0, 1
    blt $t0, 1024, you_over_loop
    jr $ra

